@inject IJSRuntime JsRuntime

<Card class="">
    <div class="mx-auto mt-4"> 
           <Figure Size="FigureSize.Is64x64">
    <FigureImage Source="@ImageUrl" AlternateText="@AudioTag" />
</Figure>
    </div>
    <CardBody>
          <div class="visually-hidden">  <audio id="@AudioTag" loop controls src="@AudioLocation"></audio></div>
         
        <div class="d-flex align-items-center">
                <Button @onclick="PlayerControl "  TextColor="TextColor.Primary" >
                    @if (PlayerIsRunning)
                {
                <Icon Name="IconName.Pause" IconSize="IconSize.Default" />

                }
                else
                {
                <Icon Name="IconName.Play" IconSize="IconSize.Default"  />
                    
                }
                </Button>
          
                <Slider TValue="double" Value="@_sliderValue" Max="1" Min="0" Step="0.05" ValueChanged="((e)=>SetSliderValue(e))" />
        </div>

    </CardBody>
</Card>



@*
<style>
    i{
        color: @Theme.ColorOptions.Primary;
    }
</style>
*@

@code {


    [CascadingParameter] Theme Theme { get; set; }

    [Parameter]
    public string ImageUrl { get; set; }

    [Parameter]
    public string AudioLocation { get; set; }
    [Parameter]
    public string AudioTag { get; set; }

    private bool PlayerIsRunning = false;

    private double _sliderValue = 0.5;



    private async void PlayerControl()
    {
        if (PlayerIsRunning)
        {
            PlayerIsRunning = false;
            await JsRuntime.InvokeVoidAsync("StopPlayer", AudioTag);
        }
        else
        { PlayerIsRunning = true;
        await JsRuntime.InvokeVoidAsync("SetPlayerVolume", AudioTag, _sliderValue);
        await JsRuntime.InvokeVoidAsync("StartPlayer", AudioTag);
        }
    }

  



    private async void SetSliderValue(double value)
    {
        _sliderValue = value;
        await JsRuntime.InvokeVoidAsync("SetPlayerVolume", AudioTag, _sliderValue);
    }


    }
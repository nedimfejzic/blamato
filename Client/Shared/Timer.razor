@implements IDisposable

@if (_timerRunning)
{
    <PageTitle>Blamato: @_timeRemaing</PageTitle>
}



    <Card Class="my-2">
        <div class="row gx-0 my-3 pe-4">

        <div class="col-2 col-md-1 text-center">
            <Button @onclick="StartTimer" Disabled="@_timerRunning">
                @if (_timerRunning)
                {
                    <Icon Name="IconName.Pause" IconSize="IconSize.x2" />

                }
                else
                {
                    <Icon Name="IconName.Play" IconSize="IconSize.x2" />
                }
            </Button>

        </div>
        <div class="col-10 col-md-11">

            <Progress Visible="@_visibleProgressBar" Value="@_progressBarPercentage" style="height: 50px;" Striped="true" Animated="@_animateProgressBar" Color="Theme.ColorOptions.Primary">
                <Span Class="font-size-lg font-monospace" Style=" text-shadow: 1px 1px 1px #2e2e2e; font-size:18px;">
                    @_timeRemaing
                </Span>
            </Progress>

        </div>




    </div>

    </Card>

    





@code {
    [Parameter]
    public EventCallback<string> OnTimerCompleted{ get; set; }

    public async Task TimerCompleted()
    {
        await OnTimerCompleted.InvokeAsync("ovo je pozvano iz timer components");
    }



    [CascadingParameter] Theme Theme { get; set; }


    private static System.Timers.Timer _timer;
    private int _time = 15;
    private float __timeStartingValue = 15;
    private bool _visibleProgressBar = false;
    private int _progressBarPercentage = 100;
    private bool _timerRunning = false;
    private bool _animateProgressBar = false;


    private ModalTest mojModal1;

    private string _timeRemaing = "Lets go boisss";

    private string CalculateRemainingTimeDescription(int seconds)
    {
        var message = TimeSpan.FromSeconds(seconds).ToString();

        if (seconds > 3600)
        {
            return message;
        }
        else
        {
            // 00:25:59 to 25:59 - just formating
            return message.Substring(3);
        }


    }


    private void StartTimer()
    {

        _timerRunning = true;
        __timeStartingValue = _time;
        _animateProgressBar = true;
        _timer = new System.Timers.Timer(1000); // sekunda
        _timer.Elapsed += CountDownTimer;
        _timer.Enabled = true;
    }


    public void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (_time > 0)
        {
            _time -= 1;
            _visibleProgressBar = true;
            _progressBarPercentage = (int)((_time / __timeStartingValue) * 100);
            _timeRemaing = CalculateRemainingTimeDescription(_time);
        }
        else
        {
            //playSound = true;
            _timer.Enabled = false;
            _visibleProgressBar = false;
            _progressBarPercentage = 100;
            _animateProgressBar = false;
            _timerRunning = false;
            TimerCompleted();
        }
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}


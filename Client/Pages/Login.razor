@page "/login"
@using Microsoft.AspNetCore.WebUtilities

@inject IAuthService _authService
@inject ILocalStorageService _localStorage
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider



    <div class="container">
        <div class="row">
           
            <EditForm Model="user" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
            <div class="col-xl-4 offset-xl-4">
                <div class="login-form mt-4 p-4" style="background-color: #F8F8F8;">
                        <Heading Size="HeadingSize.Is4" TextColor="TextColor.Primary">Welcome back!</Heading>
                        <div class="col-12">



                            <label>Email</label>
                           <InputText id="email" @bind-Value="user.Email" class="form-control"></InputText>
        <ValidationMessage For="@(() => user.Email)" />




                        </div>
                        <div class="col-12">
                            <label>Password</label>
                                <InputText id="password" @bind-Value="user.Password" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(()=> user.Password)" />
                        </div>


                        <div class="mx-3 bold">
                             <div class="text-danger">
    <span>@errorMessage</span>
</div>
                        </div>



                        <div class="col-12 mt-3">
        <Button Color="Color.Primary" Block Type="ButtonType.Submit">Login</Button>


        
                        </div>
                    <hr class="mt-4">
                    <div class="col-12">
                        <p class="text-center mb-0">Have not account yet? <Link To="/registration" TextColor="TextColor.Primary">Register</Link></p>
                          
                    </div>
                </div>
            </div>
</EditForm>

        </div>
    </div>



    @code{

        private UserLoginDTO user = new UserLoginDTO();
        private string errorMessage = string.Empty;
    private string returnUrl = string.Empty;

        
    protected override void OnInitialized()
    {
        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        };
    }

    private async Task HandleLogin()
    {
      Console.WriteLine("login page handle fired");
        var result = await _authService.Login(user);

        if (result.Sucess)
        {
            errorMessage = "";

            await _localStorage.SetItemAsync("authToken", result.Data);
            await _authenticationStateProvider.GetAuthenticationStateAsync();

            _navigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }
    }
    }